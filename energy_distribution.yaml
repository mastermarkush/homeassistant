### # iocage # v0.115
######################################
###                                ###
###     +++   PACKAGE   +++        ###
###     Energy_Distribution.yaml   ###
###                                ###
######################################

  ### energy consumption allocation based on battery debt concept ###
  ### gives energy consumers the freedom to use battery as a buffer, up to a specific and dynamic "debt" threshold
  ### Unless battery SOC is below the "debt" threshold, consumers can freely use available stored and live generated energy, depending on set priorities

### Energy Consumption per consumer:
  # EV charge : via fibaro smart ipmlant (switch.ev_charging_authorization) -> consumption set to max 3kWh (13A x 230V) in summertime and 2.3kWh (10A x 230V) during winter
  # hot water: via Sonoff Basic01 -> consumption max. 2kWh, manually set via "bridge" on hot water boiler electronics OR via heat pump during winter periods
  # heat pump between 1000 to 3000W power, depending on exterior temperature, etc.


#   #################################
    ###          -+SECTION+-      ###
    ###           Automation      ###
    #################################
automation:

#       #  General automations  #
        #########################   

  - alias: '(energy control) auto set prio consumer'
    initial_state: true
    trigger:
      - platform: time_pattern
        minutes: "/5"
    condition:
      - condition: state
        entity_id: input_boolean.energy_flow_auto_control
        state: 'on'
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.prio1_consumer
          option: >
            {% if is_state('binary_sensor.auth_hot_water','on') %}
              hot water
            {% elif is_state('binary_sensor.auth_heat_pump','on') %}
              heat pump
            {% else %}
              ev charge
            {% endif %}
      - delay: '00:00:01'
      - service: input_select.select_option
        data_template:
          entity_id: input_select.prio2_consumer
          option: >
            {% if is_state('input_select.prio1_consumer', 'hot water') %}
              heat pump
            {% else %}
              hot water
            {% endif %}
      - delay: '00:00:01'
      - service: input_select.select_option
        data_template:
          entity_id: input_select.prio3_consumer
          option: >
            {% if is_state('input_select.prio2_consumer', 'heat pump') %}
              ev charge
            {% elif is_state('input_select.prio2_consumer', 'hot water') %}
              heat pump
            {% else %}
              hot water
            {% endif %}

    # calculation of "energy debt" value, based on weather forecast
  - alias: '(energy control) dynamic change of energy debt ratio'
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.openweathermap_weather_code
    action:
      - service: input_number.set_value
        data_template: 
          value: >
            {% if is_state('sensor.owm_code_to_name', 'Partly Cloudy') %}
              60
            {% elif is_state('sensor.owm_code_to_name', 'Clear') %}
              80
            {% else %}
              40
            {% endif %}
          entity_id: input_number.dynamic_battery_debt

  - alias: '(energy control) deactivate heat pump' 
    initial_state: true
    trigger:
      - platform: template
        value_template: >
          {{ (states('luxtronik.rucklauftemperatur_trennspeicher') | float + 12) >
             states('luxtronik.rucklauftemperatur_heizkreis_soll') | float
          }}
    action: # alternatives: switch off as soon as MK valve reports "geschlossen"
      - service: switch.turn_off
        entity_id: switch.heat_pump


#        ###       START & CHANGE       ###
         ##################################

  - alias: '(energy control) dynamically authorize energy consumers'
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.auth_hot_water
        to: 'on'
      - platform: state
        entity_id: binary_sensor.auth_ev_charge
        to: 'on'
      - platform: state
        entity_id: binary_sensor.auth_heat_pump
        to: 'on'
      - platform: state
        entity_id: switch.heat_pump
        to: 'off'
      - platform: state
        entity_id: binary_sensor.water_hot
        to: 'on'
      - platform: template
        value_template: "{{ states.sensor.power_from_public_grid.state | int < -500 }}"
        for:
          minutes: 2
      - platform: template
        value_template: "{{ states.sensor.power_from_public_grid.state | int < -400 }}"
        for:
          minutes: 5
      - platform: template
        value_template: "{{ states.sensor.power_from_public_grid.state | int < -300 }}"
        for:
          minutes: 8
      - platform: template
        value_template: "{{ states.sensor.power_from_public_grid.state | int < -200 }}"
        for:
          minutes: 11
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 89
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 90
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 91
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 92
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 93
      - platform: numeric_state
        entity_id: sensor.battery_soc
        above: 94
    condition:
      - condition: state
        entity_id: binary_sensor.target_soc_failure
        state: 'off'
      - condition: template
        value_template: "{{ not is_state('sensor.dynamic_priority_consumer', 'no consumer authorized') and not is_state('sensor.battery_mode', 'calibrate') }}"
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ not is_state('sensor.dynamic_priority_consumer', 'hot water') }}"
            sequence:
              - service: switch.turn_on
                data_template:
                  entity_id: >
                    {% if is_state('sensor.dynamic_priority_consumer', 'heat pump') %}
                      switch.heat_pump
                    {% elif is_state('sensor.dynamic_priority_consumer', 'ev charge') %}
                      switch.ev_charging_authorization
                    {% endif %}
          - conditions:
              - condition: state
                entity_id: sensor.dynamic_priority_consumer
                state: 'hot water'
              - condition: state
                entity_id: binary_sensor.pv_winter_period
                state: 'on'
              - condition: state
                entity_id: luxtronik.brauchwasserpumpe_umstellventil
                state: 'off' # heat pump not running yet, e.g. in order to produce hot water
              - condition: state
                entity_id: input_boolean.vacancy_mode
                state: 'off'
              - condition: numeric_state
                entity_id: luxtronik.temperatur_warmwasser_ist
                below: 43
            sequence:
              - service: luxtronik.write
                data:
                  parameter: ID_Soll_BWS_akt
                  value: 53
          - conditions:
              - condition: state
                entity_id: sensor.dynamic_priority_consumer
                state: 'hot water'
            sequence: 
              - service: switch.turn_on
                entity_id: switch.hot_water_template_switch
      - condition: state
        entity_id: input_boolean.energy_audio_notifications
        state: 'on'
      - service: persistent_notification.create
        data_template:
          message: >
            "{{ trigger.entity_id }} changed from {{trigger.from_state.state }} to {{trigger.to_state.state }}"
          title: "new authorization of energy consumers"            



#        ###         STOP Orders     ###
         ###############################

  - alias: '(energy control) turn off consumers when power missing' 
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.target_soc_failure
        to: 'on'
      - platform: state
        entity_id: binary_sensor.target_soc_failure
        to: 'on'
        for:
          minutes: 1
      - platform: state
        entity_id: binary_sensor.target_soc_failure
        to: 'on'
        for:
          minutes: 2
      - platform: numeric_state
        entity_id: sensor.power_from_public_grid
        above: 300
        for:
          minutes: 1
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.dynamic_shutdown_consumer
            state: 'hot water'
          - condition: state
            entity_id: sensor.dynamic_shutdown_consumer
            state: 'ev charge'
    action:
      - service: switch.turn_off
        data_template:
          entity_id: >
            {% if is_state('sensor.dynamic_shutdown_consumer', 'hot water') %} switch.hot_water_template_switch
            {% elif is_state('sensor.dynamic_shutdown_consumer', 'ev charge') %} switch.ev_charging_authorization          
            {%endif%}
 
#        ###  EV Charge specific orders  ###
         ###################################
  - alias: '(energy control) start ev charging latest at 0h00 the same day'
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ states('sensor.date') == (states.input_datetime.ev_must_be_ready_by.attributes.timestamp) | int | timestamp_custom ('%Y-%m-%d', true) }}"
    action:
      service: switch.turn_on
      entity_id: switch.ev_charging_authorization

  - alias: '(energy control) hue tap switch activates EV charge for 5 minutes'
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.hue_tap_switch_1
    condition:  
      - condition: state
        entity_id: sensor.hue_tap_switch_1
        state: '3_click'        
    action:
      - service: switch.turn_on
        entity_id: switch.ev_charging_authorization
      - service: script.ev_charge_5min_audio
      - delay: '00:05:00'
      - service: switch.turn_off
        entity_id: switch.ev_charging_authorization
      - service: input_boolean.turn_on
        entity_id: input_boolean.energy_flow_auto_control


#        ###  heat pump specific orders  ###
         ###################################

  - alias: '(heat pump) switch PAC mode'
    initial_state: true
    trigger:
      - platform: state
        entity_id: input_boolean.vacancy_mode            
    action:
      - choose:
          # when family is on holidays for more than 3 days
          - conditions:
              - condition: state
                entity_id: input_boolean.vacancy_mode
                state: 'on'
            sequence:
              - service: luxtronik.write
                data:
                  parameter: ID_Ba_Hz_akt
                  value: Holidays
              - service: luxtronik.write
                data:
                  parameter: ID_Ba_Bw_akt
                  value: Holidays
        default:
          - service: luxtronik.write
            data:
              parameter: ID_Ba_Hz_akt
              value: Automatic
          - service: luxtronik.write
            data:
              parameter: ID_Ba_Bw_akt
              value: Automatic

  - alias: '(heat pump) daily PAC heating temp normalisation'
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sun.sun
        attribute: elevation
        above: 15
    action:
      - service: luxtronik.write
        data:
          parameter: ID_Einst_WK_akt
          value: 0

  - alias: '(heat pump) daily PAC heating temp increment'
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sun.sun
        attribute: elevation
        above: 19
    condition:
      condition: not
      conditions:
        - condition: state
          entity_id: sensor.season
          state: 'summer'
    action:
      - service: luxtronik.write
        data:
          parameter: ID_Einst_WK_akt
          value: 2

  - alias: '(heat pump) nightly PAC heating temp decrease'
    initial_state: true
    trigger:
      - platform: sun
        event: sunset
        offset: "-01:00:00"
    condition:
      condition: not
      conditions:
        - condition: state
          entity_id: sensor.season
          state: 'summer'
    action:
      - service: luxtronik.write
        data:
          parameter: ID_Einst_WK_akt
          value: -1

  - alias: '(heat pump) daily PAC warm water cycle'
    initial_state: true
    trigger:
      - platform: time
        at: '14:00:00'
    action:
      - service: luxtronik.write
        data:
          parameter: ID_Soll_BWS_akt
          value: 48
      - delay: '01:30:00'
      - service: luxtronik.write
        data:
          parameter: ID_Soll_BWS_akt
          value: 43

  - alias: '(heat pump) deactivate hot water production' 
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.water_hot
        to: 'on'
    action:
      - service: luxtronik.write
        data:
          parameter: ID_Soll_BWS_akt
          value: 43
          
          ##########################
#         ###      Sensors       ###
          ##########################

sensor:
# dynamic priority consumer  
  - platform: template
    sensors:
      dynamic_priority_consumer:
        friendly_name: "waiting for activation:"
        value_template: >
          {% if is_state('input_select.prio1_consumer', 'heat pump')  %}
            {% if is_state('binary_sensor.auth_heat_pump', 'on') %}
                      heat pump
            {% elif is_state('input_select.prio2_consumer', 'hot water') and is_state('binary_sensor.auth_hot_water', 'on') %}
                        hot water
            {% elif is_state('input_select.prio2_consumer', 'ev charge') and is_state('binary_sensor.auth_ev_charge', 'on') %} 
                       ev charge    
            {% elif is_state('input_select.prio3_consumer', 'ev charge') and is_state('binary_sensor.auth_ev_charge', 'on') %}
                            ev charge
            {% elif is_state('input_select.prio3_consumer', 'hot water') and is_state('binary_sensor.auth_hot_water', 'on') %} 
                           hot water
            {%else%}
                           no consumer authorized
            {% endif %}

          {% elif is_state('input_select.prio1_consumer', 'hot water')  %}
            {% if is_state('binary_sensor.auth_hot_water', 'on') %}
                          hot water
            {% elif is_state('input_select.prio2_consumer', 'ev charge') and is_state('binary_sensor.auth_ev_charge', 'on') %}
                           ev charge
            {% elif is_state('input_select.prio2_consumer', 'heat pump') and is_state('binary_sensor.auth_heat_pump', 'on') %}
                           heat pump
            {% elif is_state('input_select.prio3_consumer', 'ev charge') and is_state('binary_sensor.auth_ev_charge', 'on') %}
                            ev charge
            {% elif is_state('input_select.prio3_consumer', 'heat pump') and is_state('binary_sensor.auth_heat_pump', 'on') %} 
                           heat pump
            {%else%}
                           no consumer authorized
            {% endif %}

          {% elif is_state('input_select.prio1_consumer', 'ev charge')  %}
            {% if is_state('binary_sensor.auth_ev_charge', 'on') %}
                          ev charge
            {% elif is_state('input_select.prio2_consumer', 'hot water') and is_state('binary_sensor.auth_hot_water', 'on') %}
                            hot water
            {% elif is_state('input_select.prio2_consumer', 'heat pump') and is_state('binary_sensor.auth_heat_pump', 'on') %} 
                           heat pump
            {% elif is_state('input_select.prio3_consumer', 'hot water') and is_state('binary_sensor.auth_hot_water', 'on') %}
                            hot water
            {% elif is_state('input_select.prio3_consumer', 'heat pump') and is_state('binary_sensor.auth_heat_pump', 'on') %} 
                           heat pump
            {%else%}
                           no consumer authorized
            {% endif %}
          {% endif %}
# dynamic shutdown consumer
      dynamic_shutdown_consumer:
        friendly_name: "ready for shutdown:"
        value_template: >
          {% if is_state('input_boolean.ev_charge_override','on') %} hot water

          {% elif is_state('switch.heat_pump', 'on') or is_state('switch.hot_water_template_switch', 'on') or is_state('switch.ev_charging_authorization', 'on') %}

            {% if is_state('input_select.prio3_consumer', 'heat pump')  %}
              {% if is_state('input_select.prio2_consumer', 'hot water')  and is_state('switch.hot_water_template_switch', 'on') %}
                            hot water
              {% elif is_state('input_select.prio2_consumer', 'ev charge')  and is_state('switch.ev_charging_authorization', 'on') %}
                            ev charge
              {% else %}
                {% if states.input_select.prio1_consumer.state == 'hot water' and is_state('switch.hot_water_template_switch', 'on')%}  hot water
                {% elif states.input_select.prio1_consumer.state == 'ev charge' and is_state('switch.ev_charging_authorization', 'on')%}  ev charge
                {%else%} N/A - heat pump is running
                {%endif%}
              {% endif %}

            {% elif is_state('input_select.prio3_consumer', 'hot water') %}
              {% if is_state('switch.hot_water_template_switch', 'on') %}
                              hot water
              {% elif is_state('switch.ev_charging_authorization', 'on') %}
                              ev charge
              {% elif is_state('switch.heat_pump', 'on') %}
                              N/A - heat pump running
              {% endif %}


            {% elif is_state('input_select.prio3_consumer', 'ev charge') %}
              {% if is_state('switch.ev_charging_authorization', 'on') %}
                              ev charge
              {% elif is_state('switch.hot_water_template_switch', 'on') %}
                              hot water
              {% elif is_state('switch.heat_pump', 'on') %}
                              N/A - heat pump running
              {% endif %}

            {% endif %}


          {% else %} no device activated
          {% endif %}

# rest calls - values from Fronius inverters
  - platform: rest
    resource: http://192.168.1.31/solar_api/v1/GetInverterRealtimeData.cgi?Scope=System
    name: real time AC production est
    value_template: "{{value_json.Body.Data.PAC.Values['1'] | int }}"
    unit_of_measurement: "W"
    scan_interval: 15

  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: gross AC production PV ouest
    value_template: "{{value_json.Body.Data.Site['P_PV']  | int  }}"
    unit_of_measurement: "W"
    scan_interval: 15

  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: net household grid injection
    value_template: "{{value_json.Body.Data.Site['P_Load']  | int  }}"
    unit_of_measurement: "W"
    scan_interval: 15

  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: power from public grid
    value_template: "{{value_json.Body.Data.Site['P_Grid']  | int  }}"
    unit_of_measurement: "W"
    scan_interval: 15

  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetInverterRealtimeData.cgi?Scope=System
    name: net AC production PV ouest
    value_template: "{{value_json.Body.Data.PAC.Values['1'] | int }}"
    unit_of_measurement: "W"
    scan_interval: 15
    
  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: Battery SOC
    unit_of_measurement: "%"
    value_template: "{{value_json.Body.Data.Inverters['1']['SOC'] | int }}"
    scan_interval: 60

  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: battery discharge
    unit_of_measurement: "W"
    value_template: "{{value_json.Body.Data.Site['P_Akku'] | int }}"
    scan_interval: 15
    
  - platform: rest
    resource: http://192.168.1.32/solar_api/v1/GetPowerFlowRealtimeData.fcgi
    name: battery mode
    value_template: "{{value_json.Body.Data.Inverters['1']['Battery_Mode'] }}"
    scan_interval: 15
# other calculated values
  - platform: template
    sensors:
      cumulated_gross_real_time_production: 
        friendly_name: "cumulated gross PV real time production"
        value_template: "{{ states.sensor.real_time_ac_production_est.state | int + states.sensor.gross_ac_production_pv_ouest.state | int }}"
        unit_of_measurement: "W"

  - platform: statistics
    entity_id: sensor.cumulated_gross_real_time_production
    name: cumulated production 5min
    max_age:
      minutes: 5
    precision: 0

  - platform: statistics
    entity_id: sensor.cumulated_gross_real_time_production
    name: cumulated production 30min
    max_age:
      minutes: 30
    precision: 0
    

  # total household power consumption WITHOUT battery charge -> gives consumers priority over battery charge

  - platform: template
    sensors:
      household_power_consumption:
        friendly_name: "real time household consumption excl. battery charge"
        unit_of_measurement: "W"
        value_template: >
          {% if states.sensor.net_household_grid_injection.state  | int <= 0 %}
            {{ states.sensor.net_household_grid_injection.state  | int | abs +  states.sensor.real_time_ac_production_est.state | int }}
          {% elif states.sensor.net_household_grid_injection.state  | int > 0 %}
            {{ states.sensor.real_time_ac_production_est.state | int - states.sensor.net_household_grid_injection.state  | int  }}
          {%else%}
            N/A
          {%endif%}


  - platform: statistics
    entity_id: sensor.household_power_consumption
    name: total household consumption 5min
    max_age:
      minutes: 5
    precision: 0



    # total household power consumption INCLUDING battery charge -> gives battery charge priority over anything else

  - platform: template
    sensors:
      household_power_consumption_inc_batt:
        friendly_name: "real time household consumption incl. battery charge"
        unit_of_measurement: "W"
        value_template: >
          {% if states.sensor.battery_discharge.state | int  <= 0 %}
            {{ states.sensor.household_power_consumption.state | int + states.sensor.battery_discharge.state | int | abs  }}
          {% elif states.sensor.battery_discharge.state | int > 0 %}
            {{ states.sensor.household_power_consumption.state | int }}
          {%endif%}

  - platform: statistics
    entity_id: sensor.household_power_consumption_inc_batt
    name: total household consumption inc batt 5min
    max_age:
      minutes: 5
    precision: 0

    # total household excess power EXCLUDING battery charge 

  - platform: template
    sensors:
      total_excess_household_power_excl_batt_charge:
        friendly_name: "excess household power 5min mean excl batt"
        unit_of_measurement: "W"
        value_template: "{{ (states.sensor.cumulated_production_5min.state | int - states.sensor.total_household_consumption_5min.state | int) }}"

    # total household excess power INCLUDING battery charge

  - platform: template
    sensors:
      total_real_time_excess_household_power:
        friendly_name: "excess household power inc batt"
        unit_of_measurement: "W"
        value_template: "{{ (states.sensor.cumulated_gross_real_time_production.state | int - states.sensor.household_power_consumption_inc_batt.state | int) }}"

  - platform: template
    sensors:
      total_excess_household_power:
        friendly_name: "excess household power inc batt (5min mean calc)"
        unit_of_measurement: "W"
        value_template: "{{ (states.sensor.cumulated_production_5min.state | int - states.sensor.total_household_consumption_inc_batt_5min.state | int) }}"


    # calculate remaining_pv_light, dynamic_debt_offset and target_debt_soc

  - platform: template
    sensors:
      remaining_daylight:
        friendly_name: "Remaining Daylight in hours"
        unit_of_measurement: "h"
        value_template: "{{ '%.2f' |format ((as_timestamp(states.sun.sun.attributes.next_setting) - as_timestamp(now())) / 3600) }}"

  - platform: template
    sensors:
      remaining_pv_light:
        friendly_name: "remaining time for PV energy production"
        unit_of_measurement: "h"
        value_template: >
          {% if is_state('sensor.season', 'summer') %}
            {{'%.2f' |format (states.sensor.remaining_daylight.state | float -1.5) }}
          {% elif is_state('sensor.season', 'winter') %}
            {{'%.2f' |format (states.sensor.remaining_daylight.state | float -1) }}
          {% else %}
            {{'%.2f' |format (states.sensor.remaining_daylight.state | float -1.2) }}
          {% endif %}
          
  - platform: template
    sensors:
      dynamic_debt_offset:
        friendly_name: "debt offset from 100% SOC"
        unit_of_measurement: "%"
        value_template: "{{ '%.2f' |format (states.input_number.dynamic_battery_debt.state | int * (states.sensor.remaining_pv_light.state | float / (states.sensor.daylength.state | float - 1.8))) }}"

  - platform: template
    sensors:
      target_debt_soc:
        friendly_name: "dynamic target SOC"
        unit_of_measurement: "%"
        value_template: >
          {% if states.sensor.dynamic_debt_offset.state | int > 9 %}
            {{ 100-states.sensor.dynamic_debt_offset.state | int }}
          {% else %}
            92
          {%endif%}


#         ###  Binary Sensors    ###
          ##########################
             # authorization template sensor for energy consumers
             # "there's something I could do" = In need of energy and device is turned off
binary_sensor:
     
  - platform: template
    sensors:
      auth_heat_pump:
        friendly_name: "heat pump authorized"
        value_template: >
          {{ states('sensor.solar_angle') |int > 12 and is_state('switch.heat_pump','off') and
             (
                (
                  is_state('luxtronik.betriebszustand', 'heating')
                )
                 or
                 (
                 states('luxtronik.rucklauftemperatur_trennspeicher') | float < 
                 states('luxtronik.rucklauftemperatur_heizkreis_soll') | float
                 )
                 or
                 (
                  state_attr('weather.openweathermap', 'forecast') [1]['temperature'] |int  < 7
                 )
              )
          }}

      auth_hot_water:
        friendly_name: "hot water production authorized"
        value_template: >
          {{   is_state('binary_sensor.water_hot', 'off') and
              (
                (
                is_state('binary_sensor.pv_winter_period', 'off') and 
                is_state('switch.hot_water_template_switch', 'off') and
                is_state('luxtronik.brauchwasserpumpe_umstellventil', 'off')
                ) 
                 or 
                (
                 is_state('binary_sensor.pv_winter_period', 'on') and 
                 states('sensor.cumulated_production_5min') | int > 2000 and
                 is_state('switch.hot_water_template_switch', 'off')
                )
                 or (
                     states('sensor.battery_soc') | int > 91 and
                      (
                       is_state('switch.hot_water_template_switch', 'off') or
                       is_state('luxtronik.brauchwasserpumpe_umstellventil', 'off')
                      )
                    )
              )
          }}


      auth_ev_charge:
        friendly_name: "EV Charge authorized"
        value_template: >
          {{ states('sensor.vf1agvyb056245362_battery_level') | int < 95 and
             is_state('switch.ev_charging_authorization', 'off') and
              (
                (
                 states('sensor.cumulated_production_5min') | int > 2000 and
                 is_state('binary_sensor.pv_winter_period','on')
                ) 
               or 
                (
                 states('sensor.cumulated_production_5min') | int > 3000 and
                 is_state('binary_sensor.pv_winter_period','off')
                ) 
               or
                (
                 states('sensor.battery_soc') | int > 92
                )
              )
          }}
        
      # switches 
      switch_heat_pump:
        value_template: "{{ is_state('switch.heat_pump','on') }}"
        friendly_name: "Heat Pump Switch"
      switch_hot_water:
        value_template: "{{ is_state('switch.hot_water_template_switch','on') }}"
        friendly_name: "Hot Water - Switch"        
      switch_ev_charge:
        value_template: "{{ is_state('switch.ev_charging_authorization','on') }}"
        friendly_name: "EV Charge Switch"
      # hot water indicators 
      water_hot:
        value_template: "{{ states('luxtronik.temperatur_warmwasser_ist') | float > 48 }}"
        friendly_name: "water is hot at 48+ degrees"
        device_class: heat        
      # target soc failure 
      target_soc_failure:
        friendly_name: "battery SOC vs. target SOC"
        device_class: battery   # battery device class ---> On means low, Off means normal
        value_template: "{{ states('sensor.battery_soc') | int < states('sensor.target_debt_soc') | int }}"
      # pv winter period
      pv_winter_period:
        friendly_name: "Limited PV production"
        value_template: >
          {{ is_state('sensor.period_of_day','day') and
             states('sensor.daylength') | int < 11
          }}


  - platform: mqtt
    name: "hot water boiler 2kwh"
    state_topic: "stat/sonoff_01/POWER"
    payload_on: "ON"
    payload_off: "OFF"
    device_class: power

 
#         ###      Switches      ###
          ##########################

switch: # Sonoff Basic 01 Switch manages heating coil for warm water (drinking water) production
  - platform: mqtt
    name: "hot water production"
    command_topic: "cmnd/sonoff_01/power"
    state_topic: "stat/sonoff_01/POWER"
    qos: 1
    payload_on: "on"
    payload_off: "off"
    retain: true

  - platform: template
    switches:
      hot_water_template_switch:
        friendly_name: "hot water boiler switch"
        value_template: "{{ is_state('binary_sensor.hot_water_boiler_2kwh', 'on') }}"
        turn_on:
          service: switch.turn_on
          data:
            entity_id: switch.hot_water_production
        turn_off:
          service: switch.turn_off
          data:
            entity_id: switch.hot_water_production

#         ###      Scripts       ###
          ##########################
    
script:
  manual_ev_charge:
    alias: manual ev charge
    sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.ev_charge_override
      - service: switch.turn_on
        entity_id: switch.ev_charging_authorization
      - delay:
          minutes: "{{ states('input_number.manual_ev_charge') | int }}"
      - service: switch.turn_off
        entity_id: switch.ev_charging_authorization
      - service: input_boolean.turn_off
        entity_id: input_boolean.ev_charge_override

  ev_charge_5min_audio:
    sequence: # script doesn't support TTS
      - service: script.turn_on
        entity_id: script.sonos_say2
        data_template:
          variables:
            sonos_entity: media_player.p1mobile
            volume: 0.5
            message: "Ladung für Elektroauto autorisiert!"


#  ###############################
   ###   Various Inputs        ###
   ###############################

input_boolean:
  energy_flow_auto_control:
    name: automatic priority allocation
    initial: on

  energy_audio_notifications:
    name: Notifications for energy events
    initial: off
    icon: mdi:bell-ring

  ev_charge_override:
    name: override auto stop during ev charge
    initial: off

input_number:
  dynamic_battery_debt:
    name: dynamically calculated offset value for battery debt
    initial: 50
    min: 10
    max: 100
    step: 10

  manual_ev_charge:
    name: ev charge in minutes
    initial: 60
    min: 30
    max: 480
    step: 30
    
   ###############################
   ###   INPUT                 ###
   ###############################

input_datetime:
  ev_must_be_ready_by:
    name: EV charging must be completed by this date
    has_date: true

input_select:
  prio1_consumer:
    name: Priority 1 consumer
    options:
      - ev charge
      - hot water
      - heat pump
    initial: heat pump
    icon: mdi:arrow-up-circle

  prio2_consumer:
    name: Priority 2 consumer
    options:
      - ev charge
      - hot water
      - heat pump
    initial: ev charge
    icon: mdi:arrow-right-circle

  prio3_consumer:
    name: Priority 3 consumer
    options:
      - ev charge
      - hot water
      - heat pump
    initial: hot water
    icon: mdi:arrow-down-circle